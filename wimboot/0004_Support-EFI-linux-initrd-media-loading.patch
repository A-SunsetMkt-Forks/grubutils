From a8215cddfed785425d85c61701d1c247bdf93369 Mon Sep 17 00:00:00 2001
From: a1ive <ligenlive@gmail.com>
Date: Sat, 4 Nov 2023 11:42:09 +0800
Subject: [PATCH] Support EFI linux initrd media loading

Signed-off-by: a1ive <ligenlive@gmail.com>
---
 src/efifile.c | 146 ++++++++++++++++++++++++++++++++++++++++++--------
 1 file changed, 124 insertions(+), 22 deletions(-)

diff --git a/src/efifile.c b/src/efifile.c
index f5369d5..aa35a11 100644
--- a/src/efifile.c
+++ b/src/efifile.c
@@ -31,10 +31,12 @@
 #include "wimboot.h"
 #include "vdisk.h"
 #include "cmdline.h"
+#include "cpio.h"
 #include "wimpatch.h"
 #include "wimfile.h"
 #include "efi.h"
 #include "efifile.h"
+#include "efipath.h"
 #include "efi/Protocol/LoadFile2.h"
 #include "efi/Guid/LinuxEfiInitrdMedia.h"
 
@@ -53,9 +55,29 @@ static const wchar_t *efi_wim_paths[] = {
 	NULL
 };
 
+/** Linux initrd media device path */
+static struct {
+	VENDOR_DEVICE_PATH vendor;
+	EFI_DEVICE_PATH_PROTOCOL end;
+} __attribute__ ((packed)) efi_initrd_path = {
+	.vendor = {
+		.Header = EFI_DEVPATH_INIT (efi_initrd_path.vendor,
+									MEDIA_DEVICE_PATH, MEDIA_VENDOR_DP),
+		.Guid = LINUX_EFI_INITRD_MEDIA_GUID,
+	},
+	.end = EFI_DEVPATH_END_INIT (efi_initrd_path.end),
+};
+
 /** bootmgfw.efi file */
 struct vdisk_file *bootmgfw;
 
+
+/** WIM image file */
+static struct vdisk_file *bootwim;
+
+static void ( * efi_read_func ) ( struct vdisk_file *file, void *data,
+								  size_t offset, size_t len );
+
 /**
  * Get architecture-specific boot filename
  *
@@ -131,6 +153,97 @@ static void efi_patch_bcd ( struct vdisk_file *vfile __unused, void *data,
 	}
 }
 
+/**
+ * File handler
+ *
+ * @v name		File name
+ * @v data		File data
+ * @v len		Length
+ * @ret rc		Return status code
+ */
+static int efi_add_file ( const char *name, void *data, size_t len) {
+	struct vdisk_file *vfile;
+	char bootarch[32];
+
+	snprintf ( bootarch, sizeof ( bootarch ), "%ls", efi_bootarch() );
+
+	vfile = vdisk_add_file ( name, data, len, efi_read_func );
+
+	/* Check for special-case files */
+	if ( ( strcasecmp ( name, bootarch ) == 0 ) ||
+		 ( strcasecmp ( name, "bootmgfw.efi" ) == 0 ) ) {
+		DBG ( "...found bootmgfw.efi file %s\n", name );
+		bootmgfw = vfile;
+	} else if ( strcasecmp ( name, "BCD" ) == 0 ) {
+		DBG ( "...found BCD\n" );
+		vdisk_patch_file ( vfile, efi_patch_bcd );
+	} else if ( strcasecmp ( ( name + ( strlen ( name ) - 4 ) ),
+				".wim" ) == 0 ) {
+		DBG ( "...found WIM file %s\n", name );
+		bootwim = vfile;
+	}
+
+	return 0;
+}
+
+/**
+ * Extract files from Linux initrd media
+ *
+ * @ret rc		Return status code
+ */
+static int
+efi_extract_initrd (void)
+{
+	EFI_BOOT_SERVICES *bs = efi_systab->BootServices;
+	EFI_HANDLE lf2_handle;
+	EFI_LOAD_FILE2_PROTOCOL *lf2;
+	EFI_DEVICE_PATH_PROTOCOL *dp = ( EFI_DEVICE_PATH_PROTOCOL * ) &efi_initrd_path;
+	UINTN initrd_len = 0;
+	UINTN pages;
+	void *initrd;
+	EFI_PHYSICAL_ADDRESS phys;
+	EFI_STATUS efirc;
+
+	/* Locate initrd media device */
+	efirc = bs->LocateDevicePath ( &efi_load_file2_protocol_guid,
+								   &dp, &lf2_handle );
+	if ( efirc != EFI_SUCCESS )
+		return -1;
+	DBG ( "...found initrd media device\n" );
+
+	/* Get LoadFile2 protocol */
+	efirc = bs->HandleProtocol ( lf2_handle, &efi_load_file2_protocol_guid,
+								 ( void ** ) &lf2 );
+	if ( efirc != EFI_SUCCESS )
+		die ( "Could not get LoadFile2 protocol.\n" );
+
+	/* Get initrd size */
+	efirc = lf2->LoadFile ( lf2, dp, FALSE, &initrd_len, NULL );
+	if ( initrd_len == 0 )
+		die ( "Could not get initrd size\n" );
+
+	/* Allocate memory */
+	pages = ( ( initrd_len + PAGE_SIZE - 1 ) / PAGE_SIZE );
+	if ( ( efirc = bs->AllocatePages ( AllocateAnyPages,
+					   EfiLoaderData, pages,
+					   &phys ) ) != 0 ) {
+		die ( "Could not allocate %ld pages: %#lx\n",
+		      ( ( unsigned long ) pages ), ( ( unsigned long ) efirc ) );
+	}
+	initrd = ( ( void * ) ( intptr_t ) phys );
+
+	/* Read initrd */
+	efirc = lf2->LoadFile ( lf2, dp, FALSE, &initrd_len, initrd );
+	if (efirc != EFI_SUCCESS)
+		die ("Could not read initrd.\n");
+
+	efi_read_func = vdisk_read_mem_file;
+	if ( cpio_extract ( initrd, initrd_len, efi_add_file ) != 0 )
+		die ( "FATAL: could not extract initrd files\n" );
+
+	return 0;
+}
+
 /**
  * Extract files from EFI file system
  *
@@ -147,14 +260,16 @@ void efi_extract ( EFI_HANDLE handle ) {
 		CHAR16 name[ VDISK_NAME_LEN + 1 /* WNUL */ ];
 	} __attribute__ (( packed )) info;
 	char name[ VDISK_NAME_LEN + 1 /* NUL */ ];
-	struct vdisk_file *wim = NULL;
-	struct vdisk_file *vfile;
 	EFI_FILE_PROTOCOL *root;
 	EFI_FILE_PROTOCOL *file;
 	UINTN size;
 	CHAR16 *wname;
 	EFI_STATUS efirc;
 
+	/* Extract files from initrd media */
+	if ( efi_extract_initrd () == 0 )
+	  goto proc_wim;
+
 	/* Open file system */
 	if ( ( efirc = bs->OpenProtocol ( handle,
 					  &efi_simple_file_system_protocol_guid,
@@ -200,34 +315,21 @@ void efi_extract ( EFI_HANDLE handle ) {
 
 		/* Add file */
 		snprintf ( name, sizeof ( name ), "%ls", wname );
-		vfile = vdisk_add_file ( name, file, info.file.FileSize,
-					 efi_read_file );
-
-		/* Check for special-case files */
-		if ( ( wcscasecmp ( wname, efi_bootarch() ) == 0 ) ||
-		     ( wcscasecmp ( wname, L"bootmgfw.efi" ) == 0 ) ) {
-			DBG ( "...found bootmgfw.efi file %ls\n", wname );
-			bootmgfw = vfile;
-		} else if ( wcscasecmp ( wname, L"BCD" ) == 0 ) {
-			DBG ( "...found BCD\n" );
-			vdisk_patch_file ( vfile, efi_patch_bcd );
-		} else if ( wcscasecmp ( ( wname + ( wcslen ( wname ) - 4 ) ),
-					 L".wim" ) == 0 ) {
-			DBG ( "...found WIM file %ls\n", wname );
-			wim = vfile;
-		}
+		efi_read_func = efi_read_file;
+		efi_add_file ( name, file, info.file.FileSize );
 	}
 
+proc_wim:
 	/* Process WIM image */
-	if ( wim ) {
-		vdisk_patch_file ( wim, patch_wim );
+	if ( bootwim ) {
+		vdisk_patch_file ( bootwim, patch_wim );
 		if ( ( ! bootmgfw ) &&
-		     ( bootmgfw = wim_add_file ( wim, cmdline_index,
+		     ( bootmgfw = wim_add_file ( bootwim, cmdline_index,
 						 bootmgfw_path,
 						 efi_bootarch() ) ) ) {
 			DBG ( "...extracted %ls\n", bootmgfw_path );
 		}
-		wim_add_files ( wim, cmdline_index, efi_wim_paths );
+		wim_add_files ( bootwim, cmdline_index, efi_wim_paths );
 	}
 
 	/* Check that we have a boot file */
